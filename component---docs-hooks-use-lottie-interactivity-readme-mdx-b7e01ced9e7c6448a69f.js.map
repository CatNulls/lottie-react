{"version":3,"sources":["webpack:///../docs/hooks/useLottieInteractivity/README.mdx"],"names":["_frontmatter","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"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","file":"component---docs-hooks-use-lottie-interactivity-readme-mdx-b7e01ced9e7c6448a69f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/Gamote/lottie-react/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from \"docz\";\nimport UseInteractivityBasic from \"./UseInteractivityBasic.js\";\nimport ScrollWithOffset from \"./ScrollWithOffset.js\";\nimport ScrollWithOffsetAndLoop from \"./ScrollWithOffsetAndLoop.js\";\nimport PlaySegmentsOnHover from \"./PlaySegmentsOnHover.js\";\nimport CursorDiagonalSync from \"./CursorDiagonalSync.js\";\nimport CursorHorizontalSync from \"./CursorHorizontalSync.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"uselottieinteractivity\"\n    }}>{`useLottieInteractivity`}</h1>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h2>\n    <p>{`Use this hook along with the `}\n      <strong {...{\n        \"parentName\": \"p\"\n      }}>{`useLottie`}</strong>\n      {` hook to add animations synced with\nscroll and cursor`}</p>\n    <p>{`Also read `}\n      <a {...{\n        \"href\": \"https://lottiefiles.com/interactivity\",\n        \"parentName\": \"p\"\n      }}>{`official lottie\nreference`}</a>\n      {` for general, non-react\nsolution.`}</p>\n    <UseInteractivityBasic mdxType=\"UseInteractivityBasic\" />\n    <pre><code {...{\n        \"className\": \"language-jsx\",\n        \"parentName\": \"pre\"\n      }}>{`import { useLottie, useLottieInteractivity } from \"lottie-react\";\nimport likeButton from \"./likeButton.json\";\n\nconst style = {\n  height: 300,\n  border: 3,\n  borderStyle: \"solid\",\n  borderRadius: 7,\n};\n\nconst options = {\n  animationData: likeButton,\n};\n\nconst Example = () => {\n  const lottieObj = useLottie(options, style);\n  const Animation = useLottieInteractivity({\n    lottieObj,\n    mode: \"scroll\",\n    actions: [\n      {\n        visibility: [0.4, 0.9],\n        type: \"seek\",\n        frames: [0, 38],\n      },\n    ],\n  });\n\n  return Animation;\n};\n\nexport default Example;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"params\"\n    }}>{`Params`}</h2>\n    <table>\n\n      <thead {...{\n        \"parentName\": \"table\"\n      }}>\n\n        <tr {...{\n          \"parentName\": \"thead\"\n        }}>\n\n          <th {...{\n            \"parentName\": \"tr\"\n          }}>{`Param`}</th>\n\n\n          <th {...{\n            \"parentName\": \"tr\"\n          }}>{`Type`}</th>\n\n\n          <th {...{\n            \"parentName\": \"tr\"\n          }}>{`Required`}</th>\n\n\n          <th {...{\n            \"parentName\": \"tr\"\n          }}>{`Default`}</th>\n\n\n          <th {...{\n            \"parentName\": \"tr\"\n          }}>{`Description`}</th>\n\n        </tr>\n\n      </thead>\n\n\n      <tbody {...{\n        \"parentName\": \"table\"\n      }}>\n\n        <tr {...{\n          \"parentName\": \"tbody\"\n        }}>\n\n          <td {...{\n            \"parentName\": \"tr\"\n          }}>{`lottieObj`}</td>\n\n\n          <td {...{\n            \"parentName\": \"tr\"\n          }}>{`object`}</td>\n\n\n          <td {...{\n            \"parentName\": \"tr\"\n          }}>{`required`}</td>\n\n\n          <td {...{\n            \"parentName\": \"tr\"\n          }} />\n\n\n          <td {...{\n            \"parentName\": \"tr\"\n          }}>{`Result returned from the useLottie() hook`}</td>\n\n        </tr>\n\n\n        <tr {...{\n          \"parentName\": \"tbody\"\n        }}>\n\n          <td {...{\n            \"parentName\": \"tr\"\n          }}>{`mode`}</td>\n\n\n          <td {...{\n            \"parentName\": \"tr\"\n          }}>{`string`}</td>\n\n\n          <td {...{\n            \"parentName\": \"tr\"\n          }}>{`required`}</td>\n\n\n          <td {...{\n            \"parentName\": \"tr\"\n          }} />\n\n\n          <td {...{\n            \"parentName\": \"tr\"\n          }}>{`Either \"scroll\" or \"cursor\". Event that will be synced with animation`}</td>\n\n        </tr>\n\n\n        <tr {...{\n          \"parentName\": \"tbody\"\n        }}>\n\n          <td {...{\n            \"parentName\": \"tr\"\n          }}>{`actions`}</td>\n\n\n          <td {...{\n            \"parentName\": \"tr\"\n          }}>{`array`}</td>\n\n\n          <td {...{\n            \"parentName\": \"tr\"\n          }}>{`required`}</td>\n\n\n          <td {...{\n            \"parentName\": \"tr\"\n          }} />\n\n\n          <td {...{\n            \"parentName\": \"tr\"\n          }}>{`Array of actions that will run in sequence (SEE BELOW)`}</td>\n\n        </tr>\n\n      </tbody>\n\n    </table>\n    <p><strong {...{\n        \"parentName\": \"p\"\n      }}>{`actions`}</strong>\n      {` is an array of objects that define how animation will\nbe run based on the chosen mode. One action chains the next one.`}</p>\n    <p>{`An action object is defined as:`}</p>\n    <pre><code {...{\n        \"className\": \"language-js\",\n        \"parentName\": \"pre\"\n      }}>{`{\n  frames: [number] | [number, number];\n  type: \"seek\" | \"play\" | \"stop\" | \"loop\";\n  visibility?: [number, number];\n  position?: { [axis in \"x\" | \"y\"]: number | [number, number] };\n} \n`}</code></pre>\n    <h3 {...{\n      \"id\": \"frames\"\n    }}>{`frames`}</h3>\n    <p>{`Animation frame range to play for the action.`}</p>\n    <p>{`Let's say full animation has 150 frames.\nTo sync all 150 frames with one action, you would pass `}\n      {`[0, 150]`}\n      {`.\nTo start animation from 50 frame and end at 120, you would pass `}\n      {`[50, 120]`}\n      {`.\nTo freeze animation at 80 frame, you would pass `}\n      {`[80]`}\n      {`.`}</p>\n    <h3 {...{\n      \"id\": \"type\"\n    }}>{`type`}</h3>\n    <p>{`Action type.`}</p>\n    <p>{`'play', 'stop', 'loop' are pretty self-explanatory. With 'seek' passed, lottie\nwill play animation frame by frame as you scroll down the page (mode: \"scroll\")\nor move cursor around (mode: \"cursor\").`}</p>\n    <h3 {...{\n      \"id\": \"visibility\"\n    }}>{`visibility`}</h3>\n    <p>{`Viewport of the action (mode \"scroll\" only)`}</p>\n    <p>{`Each action has a start and end which is essentially a percentage for the height\nof the lottie container and is a value between 0 and 1.\nTo start the action when animation is visible on the page, you would pass `}\n      {`[0, 1]`}\n      {`.\nTo start lottie after 40% scrolled and end at 85% scrolled, you would pass `}\n      {`[0.4, 0.85]`}\n      {`.`}</p>\n    <h3 {...{\n      \"id\": \"position\"\n    }}>{`position`}</h3>\n    <p>{`Cursor viewport (mode \"cursor\" only)`}</p>\n    <p>{`You can define how much of the viewport cursor movement will cover inside the\nanimation element. To set cursor cover the entire animation element, you would\npass `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`{ x: [0, 1], y: [0, 1]}`}</inlineCode>\n      {`. To set cursor outside of the element, you would\npass `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`{ x: -1, y: -1 }`}</inlineCode>\n      {`.`}</p>\n    <h2 {...{\n      \"id\": \"returns\"\n    }}>{`Returns`}</h2>\n    <h3 {...{\n      \"id\": \"reactelement\"\n    }}>{`React.Element`}</h3>\n    <p>{`You only need to render the returned value.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"lottie-scroll-with-offset\"\n    }}>{`Lottie scroll with offset`}</h3>\n    <p>{`From 0 to 45% of the container the Lottie will be stopped, and from 45% to 100%\nof the container the Lottie will be synced with the scroll.`}</p>\n    <ScrollWithOffset mdxType=\"ScrollWithOffset\" />\n    <pre><code {...{\n        \"className\": \"language-jsx\",\n        \"parentName\": \"pre\"\n      }}>{`import { useLottie, useLottieInteractivity } from \"lottie-react\";\nimport likeButton from \"./likeButton.json\";\n\nconst options = {\n  animationData: likeButton,\n};\n\nconst Example = () => {\n  const lottieObj = useLottie(options);\n  const Animation = useLottieInteractivity({\n    lottieObj,\n    mode: \"scroll\",\n    actions: [\n      {\n        visibility: [0, 0.45],\n        type: \"stop\",\n        frames: [0],\n      },\n      {\n        visibility: [0.45, 1],\n        type: \"seek\",\n        frames: [0, 38],\n      },\n    ],\n  });\n\n  return Animation;\n};\n\nexport default Example;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"scroll-effect-with-offset-and-segment-looping\"\n    }}>{`Scroll effect with offset and segment looping`}</h3>\n    <p>{`In cases where you would like the animation to loop from a specific frame to a\nspecific frame, you can add an additional object to actions in which you can\nspecify the frames. In the example below, the Lottie loops frame 45 to 60 once\n45% of the container is reached.`}</p>\n    <ScrollWithOffsetAndLoop mdxType=\"ScrollWithOffsetAndLoop\" />\n    <pre><code {...{\n        \"className\": \"language-jsx\",\n        \"parentName\": \"pre\"\n      }}>{`import { useLottie, useLottieInteractivity } from \"lottie-react\";\nimport robotAnimation from \"./robotAnimation.json\";\n\nconst options = {\n  animationData: robotAnimation,\n};\n\nconst Example = () => {\n  const lottieObj = useLottie(options);\n  const Animation = useLottieInteractivity({\n    lottieObj,\n    mode: \"scroll\",\n    actions: [\n      {\n        visibility: [0, 0.2],\n        type: \"stop\",\n        frames: [0],\n      },\n      {\n        visibility: [0.2, 0.45],\n        type: \"seek\",\n        frames: [0, 45],\n      },\n      {\n        visibility: [0.45, 1.0],\n        type: \"loop\",\n        frames: [45, 60],\n      },\n    ],\n  });\n\n  return Animation;\n};\n\nexport default Example;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"play-segments-on-hover\"\n    }}>{`Play segments on hover`}</h3>\n    <p>{`When the cursor moves in to the container, the Lottie loops from frame 45 to 60\nas long as cursor is inside the container. The stop action as shown below is so\nthat the animation is stopped at the 45th frame when cursor is outside.`}</p>\n    <PlaySegmentsOnHover mdxType=\"PlaySegmentsOnHover\" />\n    <pre><code {...{\n        \"className\": \"language-jsx\",\n        \"parentName\": \"pre\"\n      }}>{`import { useLottie, useLottieInteractivity } from \"lottie-react\";\nimport robotAnimation from \"./robotAnimation.json\";\n\nconst style = {\n  height: 300,\n  border: 3,\n  borderStyle: \"solid\",\n  borderRadius: 7,\n};\n\nconst options = {\n  animationData: robotAnimation,\n};\n\nconst PlaySegmentsOnHover = () => {\n  const lottieObj = useLottie(options, style);\n  const Animation = useLottieInteractivity({\n    lottieObj,\n    mode: \"cursor\",\n    actions: [\n      {\n        position: { x: [0, 1], y: [0, 1] },\n        type: \"loop\",\n        frames: [45, 60],\n      },\n      {\n        position: { x: -1, y: -1 },\n        type: \"stop\",\n        frames: [45],\n      },\n    ],\n  });\n\n  return Animation;\n};\n\nexport default PlaySegmentsOnHover;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"sync-cursor-position-with-animation\"\n    }}>{`Sync cursor position with animation`}</h3>\n    <p>{`Moving the cursor from top left of the container to the bottom right of the\ncontainer completes the animation. The seeking of the animation is synced to the\ndiagonal movement of the cursor.`}</p>\n    <CursorDiagonalSync mdxType=\"CursorDiagonalSync\" />\n    <pre><code {...{\n        \"className\": \"language-jsx\",\n        \"parentName\": \"pre\"\n      }}>{`import { useLottie, useLottieInteractivity } from \"lottie-react\";\nimport robotAnimation from \"./robotAnimation.json\";\n\nconst style = {\n  height: 300,\n  border: 3,\n  borderStyle: \"solid\",\n  borderRadius: 7,\n};\n\nconst options = {\n  animationData: robotAnimation,\n};\n\nconst CursorDiagonalSync = () => {\n  const lottieObj = useLottie(options, style);\n  const Animation = useLottieInteractivity({\n    lottieObj,\n    mode: \"cursor\",\n    actions: [\n      {\n        position: { x: [0, 1], y: [0, 1] },\n        type: \"seek\",\n        frames: [0, 180],\n      },\n    ],\n  });\n\n  return Animation;\n};\n\nexport default CursorDiagonalSync;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"sync-animation-with-cursor-horizontal-movement\"\n    }}>{`Sync animation with cursor horizontal movement`}</h3>\n    <p>{`Move your cursor on the animation below. You may interchange the x and y arrays\nto get the vertical movement of the cursor synced with the animation.`}</p>\n    <CursorHorizontalSync mdxType=\"CursorHorizontalSync\" />\n    <pre><code {...{\n        \"className\": \"language-jsx\",\n        \"parentName\": \"pre\"\n      }}>{`import { useLottie, useLottieInteractivity } from \"lottie-react\";\nimport hamsterAnimation from \"./hamsterAnimation.json\";\n\nconst style = {\n  height: 300,\n  border: 3,\n  borderStyle: \"solid\",\n  borderRadius: 7,\n};\n\nconst options = {\n  animationData: hamsterAnimation,\n};\n\nconst CursorHorizontalSync = () => {\n  const lottieObj = useLottie(options, style);\n  const Animation = useLottieInteractivity({\n    lottieObj,\n    mode: \"cursor\",\n    actions: [\n      {\n        position: { x: [0, 1], y: [-1, 2] },\n        type: \"seek\",\n        frames: [0, 179],\n      },\n      {\n        position: { x: -1, y: -1 },\n        type: \"stop\",\n        frames: [0],\n      },\n    ],\n  });\n\n  return Animation;\n};\n\nexport default CursorHorizontalSync;\n`}</code></pre>\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}